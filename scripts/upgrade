#!/bin/bash

source _common.sh
source /usr/share/yunohost/helpers

if ! ynh_in_ci_tests; then
    # Check memory requirements
    check_memory_requirements
fi

#=================================================
# INITIALIZE AND STORE SETTINGS
#=================================================

relative_url_root=${path%/}
admin_mail=$(ynh_user_get_info --username=$admin --key=mail)
secret="$(ynh_string_random)"

#=================================================
# ENABLE MAINTENANCE MODE
#=================================================
ynh_script_progression "Enabling maintenance mode..."

ynh_maintenance_mode_ON

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression "Stopping $app's systemd service..."

ynh_systemctl --service="$app" --action="stop" --log_path="$install_dir/discourse/log/unicorn.stdout.log"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression "Ensuring downward compatibility..."

# If unicorn_workers doesn't exist, create it
if [ -z "$unicorn_workers" ]; then
    # We assume for the moment that ARM devices are only dual core, so
    # we restrict the number of workers to 2 (the default is 3)
    if dpkg --print-architecture | grep -q "arm"; then
        unicorn_workers=2
    else
        unicorn_workers=3
    fi
    ynh_app_setting_set --key="unicorn_workers" --value="$unicorn_workers"
fi

if [ -f "$install_dir/tmp/sockets/unicorn.sock" ]; then
    # Move sources into the discourse subdir.
    mkdir -p "$install_dir/__new__"
    find "$install_dir" -mindepth 1 -maxdepth 1 -not -name "__new__" -print0 | xargs -0 mv -t "$install_dir/__new__"
    mv "$install_dir/__new__" "$install_dir/discourse"
fi

# See https://github.com/jonmbake/discourse-ldap-auth/issues/77
if [ -d "$install_dir/discourse/plugins/discourse-ldap-auth" ]; then
    mv "$install_dir/discourse/plugins/discourse-ldap-auth" "$install_dir/discourse/plugins/ldap"
fi

if [ ! -d "$install_dir/discourse" ]; then
    tmpdir=$(mktemp -d)
    mv $install_dir $tmpdir/
    mkdir -p "$install_dir"
    mv $tmpdir/$app $install_dir/
    ynh_delete_file_checksum "$install_dir/config/discourse.conf"
    ynh_store_file_checksum "$install_dir/discourse/config/discourse.conf"
    ynh_delete_file_checksum "$install_dir/config/secrets.yml"
    ynh_store_file_checksum "$install_dir/discourse/config/secrets.yml"
    mv "$install_dir/discourse/plugins/discourse-ldap-auth" "$install_dir/discourse/plugins/ldap"
    ynh_delete_file_checksum "$install_dir/plugins/discourse-ldap-aut/config/settings.yml"
    ynh_store_file_checksum "$install_dir/discourse/plugins/ldap/config/settings.yml"
    ynh_safe_rm "$tmpdir"
    ynh_config_remove_logrotate
    ynh_safe_rm "$install_dir/public/forum/uploads"
    ynh_safe_rm "$install_dir/public/forum/backups"
fi

#=================================================
# UPGRADING DEPENDENCIES
#=================================================
ynh_script_progression "Upgrading dependency..."

# Upgrading Ruby
ynh_ruby_install

# Upgrading NodeJS
ynh_nodejs_install

# Building and upgrading ImageMagick v7
install_imagemagick

# Upgrading Oxipng
install_oxipng

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Upgrading source files..."

# Specific actions on ARM architecture
if dpkg --print-architecture | grep -q "arm"; then
    # Unapply commit cf9b4a789b855b5199e98a13424e409854a8e848 that breaks ARM
    # compatibility by pointing to a recent libv8 version
    # This is due to this libv8 issue (https://github.com/cowboyd/libv8/issues/261)
    # that prevents it from being compiled on ARM hence no binary gem is available yet
    cp ../patches_arm/* ../patches
fi

# Small trick to backup non-core plugins
mv "$install_dir/discourse/plugins" "$install_dir/discourse/plugins_old"

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir/discourse" --full_replace --keep="config/discourse.conf plugins_old public/uploads public/backups log"

# Restore all non-core plugins
for plugin_dir in "$install_dir/discourse/plugins_old"/*; do
    plugin_name=$(basename "$plugin_dir")
    if [ ! -d "$install_dir/discourse/plugins/$plugin_name" ]; then
        mv "$plugin_dir" "$install_dir/discourse/plugins/$plugin_name"
    fi
done

ynh_safe_rm "$install_dir/discourse/plugins_old"

# Install LDAP plugin
ynh_setup_source --source_id=ldap-auth --dest_dir="$install_dir/discourse/plugins/ldap" --full_replace --keep="config/settings.yml"

# Add a pids and socket directory for the systemd script.
mkdir -p "$install_dir/discourse/tmp/pids"
mkdir -p "$install_dir/discourse/tmp/sockets"
mkdir -p "$install_dir/discourse/public/forum"

# Create specific folders and links for subfolder compatibility
# (see: https://meta.discourse.org/t/subfolder-support-with-docker/30507)
ln -s "$install_dir/discourse/public/uploads" "$install_dir/discourse/public/forum/uploads"
ln -s "$install_dir/discourse/public/backups" "$install_dir/discourse/public/forum/backups"

# Set permissions to app files
chmod -R o-rwx "$install_dir"
chown -R "$app:www-data" "$install_dir"

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression "Updating $app's config file..."

ynh_config_add --template="discourse_defaults.conf" --destination="$install_dir/discourse/config/discourse.conf"
ynh_config_add --template="secrets.yml" --destination="$install_dir/discourse/config/secrets.yml"
ynh_config_add --template="settings.yml" --destination="$install_dir/discourse/plugins/ldap/config/settings.yml"

# Disable svgo worker
echo "svgo: false" | ynh_exec_as_app tee "$install_dir/discourse/.image_optim.yml" >/dev/null

#=================================================
# SETUP UNICORN, A RUBY SERVER
#=================================================
ynh_script_progression "Setting up Unicorn..."

# Make a backup of the original config file if modified
unicorn_config_file="$install_dir/discourse/config/unicorn.conf.rb"
ynh_backup_if_checksum_is_different "$unicorn_config_file"
ynh_store_file_checksum "$unicorn_config_file"

# On ARM architecture, replace bundled libpsl by system native libpsl
# because the provided binary isn't compatible
if dpkg --print-architecture | grep -q "arm"; then
    (
        cd "$install_dir/discourse/vendor/bundle/ruby"/*/"gems/mini_suffix-*/vendor"
        rm libpsl.so
        ln -s "$(ldconfig -p | grep libpsl | awk 'END {print $NF}')" libpsl.so
    )
fi

pushd "$install_dir/discourse"
    # Install bundler, a gems installer
    gem install bundler --conservative -v $(awk '/BUNDLED WITH/ { getline; gsub(/ /,""); print $0 }' $install_dir/discourse/Gemfile.lock)
    # Install without documentation
    echo "gem: --no-ri --no-rdoc" | ynh_exec_as_app tee "$install_dir/discourse/.gemrc" >/dev/null

    # Specific actions on ARM architecture
    if dpkg --print-architecture | grep -q "arm"; then
        # Define the platform specifically to retrieve binaries
        # for libv8 because it currently doesn't compile on ARM devices
        _exec_as_app_with_ruby_node bundle config specific_platform arm-linux
    fi

    # Install dependencies
    _exec_as_app_with_ruby_node bundle config --local path "$install_dir/discourse/vendor/bundle"
    _exec_as_app_with_ruby_node bundle config --local without test development
    _exec_as_app_with_ruby_node bundle install --jobs 2
popd

pushd "$install_dir/discourse"
    ynh_hide_warnings npm install --location=global terser
    ynh_hide_warnings npm install --location=global uglify-js
    ynh_hide_warnings npm install --location=global pnpm@9
    ynh_hide_warnings _exec_as_app_with_ruby_node yarn install --frozen-lockfile
    #ynh_hide_warnings _exec_as_app_with_ruby_node yarn cache clean
popd

#=================================================
# PREPARE THE DATABASE
#=================================================
ynh_script_progression "Preparing the database..."

pushd "$install_dir/discourse"
    ynh_hide_warnings _exec_as_app_with_ruby_node RAILS_ENV=production bundle exec rake db:migrate
    ynh_hide_warnings _exec_as_app_with_ruby_node RAILS_ENV=production bundle exec rake themes:update assets:precompile
popd

#=================================================
# CONFIGURE PLUGINS
#=================================================
ynh_script_progression "Configuring plugins..."

# Patch ldap-auth plugin dependency (omniauth-ldap) to fix it when using domain subfolder
# (Can only do that now because we are patching dependencies which have just been downloaded)
# Patch applied: https://github.com/omniauth/omniauth-ldap/pull/16
patch -p1 -d "$install_dir/discourse/plugins/ldap/gems/$ruby_version/gems/omniauth-ldap"*/ \
    < "../conf/ldap-auth-fix-subfolder.patch"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression "Upgrading system configurations related to $app..."

# Create a dedicated NGINX config
ynh_config_add_nginx
# Reference: https://meta.discourse.org/t/subfolder-support-with-docker/30507?u=falco&source_topic_id=54191
if [ "$path" != "/" ] ; then
    ynh_replace --file="/etc/nginx/conf.d/$domain.d/$app.conf" \
        --match='$proxy_add_x_forwarded_for' \
        --replace='$http_your_original_ip_header'
fi
ynh_store_file_checksum "/etc/nginx/conf.d/$domain.d/$app.conf"

additional_env="UNICORN_WORKERS=$unicorn_workers"
ynh_config_add_systemd
yunohost service add "$app" --log "$install_dir/discourse/log/unicorn.stderr.log" "$install_dir/discourse/log/unicorn.stdout.log" "$install_dir/discourse/log/production.log"

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate "$install_dir/discourse/log/unicorn.stderr.log"
ynh_config_add_logrotate "$install_dir/discourse/log/unicorn.stdout.log"
ynh_config_add_logrotate "$install_dir/discourse/log/production.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

ynh_systemctl --service="$app" --action="start" --log_path="$install_dir/discourse/log/unicorn.stdout.log" --wait_until="INFO -- : worker=$((unicorn_workers-1)) ready"

#=================================================
# DISABLE MAINTENANCE MODE
#=================================================
ynh_script_progression "Disabling maintenance mode..."

ynh_maintenance_mode_OFF

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
