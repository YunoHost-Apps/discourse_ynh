#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

if [ "${PACKAGE_CHECK_EXEC:-0}" -ne 1 ]; then
    # Check memory requirements
    check_memory_requirements
fi

#=================================================
# INITIALIZE AND STORE SETTINGS
#=================================================

admin_mail=$(ynh_user_get_info --username=$admin --key=mail)
relative_url_root=${path%/}
secret="$(ynh_string_random)"

#=================================================
# ENABLE MAINTENANCE MODE
#=================================================
ynh_script_progression --message="Enabling maintenance mode..."

ynh_maintenance_mode_ON

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..."

ynh_systemd_action --service_name="$app" --action="stop" --log_path="$install_dir/log/unicorn.stderr.log"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# If unicorn_workers doesn't exist, create it
if [ -z "$unicorn_workers" ]; then
    # We assume for the moment that ARM devices are only dual core, so
    # we restrict the number of workers to 2 (the default is 3)
    if dpkg --print-architecture | grep -q "arm"; then
        unicorn_workers=2
    else
        unicorn_workers=3
    fi
    ynh_app_setting_set --app="$app" --key="unicorn_workers" --value="$unicorn_workers"
fi

#=================================================
# UPGRADING DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading Ruby..."
ynh_exec_warn_less ynh_install_ruby --ruby_version="$ruby_version"
ynh_use_ruby

ynh_script_progression --message="Upgrading NodeJS..."
ynh_exec_warn_less ynh_install_nodejs --nodejs_version=$nodejs_version

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Upgrading source files..."

# Specific actions on ARM architecture
if dpkg --print-architecture | grep -q "arm"; then
    # Unapply commit cf9b4a789b855b5199e98a13424e409854a8e848 that breaks ARM
    # compatibility by pointing to a recent libv8 version
    # This is due to this libv8 issue (https://github.com/cowboyd/libv8/issues/261)
    # that prevents it from being compiled on ARM hence no binary gem is available yet
    cp ../sources/patches_arm/* ../sources/patches
fi

# Small trick to backup non-core plugins
mv "$install_dir/plugins" "$install_dir/plugins_old"

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$install_dir" --full_replace=1 \
    --keep="config/discourse.conf plugins_old public/uploads public/backups log"

# Restore all non-core plugins
for plugin_dir in "$install_dir/plugins"/*; do
    plugin_name=$(basename "$plugin_dir")
    if [ ! -d "$install_dir/plugins/$plugin_name" ]; then
        mv "$plugin_dir" "$install_dir/plugins/$plugin_name"
    fi
done
ynh_secure_remove --file="$install_dir/plugins_old"

# Install LDAP plugin
ynh_setup_source --source_id=ldap-auth --dest_dir="$install_dir/plugins/discourse-ldap-auth" --full_replace=1 \
    --keep="config/settings.yml"

# Add a pids and socket directory for the systemd script.
mkdir -p "$install_dir/tmp/pids"
mkdir -p "$install_dir/tmp/sockets"
mkdir -p "$install_dir/public/forum"

# Create specific folders and links for subfolder compatibility
# (see: https://meta.discourse.org/t/subfolder-support-with-docker/30507)
ln -s "$install_dir/public/uploads" "$install_dir/public/forum/uploads"
ln -s "$install_dir/public/backups" "$install_dir/public/forum/backups"

# Set permissions to app files
chmod -R o-rwx "$install_dir"
chown -R "$app:www-data" "$install_dir"

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating $app's config file..."

ynh_add_config --template="discourse_defaults.conf" --destination="$install_dir/config/discourse.conf"
ynh_add_config --template="secrets.yml" --destination="$install_dir/config/secrets.yml"
ynh_add_config --template="settings.yml" --destination="$install_dir/plugins/discourse-ldap-auth/config/settings.yml"

# Disable svgo worker
echo "svgo: false" | ynh_exec_as "$app" tee "$install_dir/.image_optim.yml" >/dev/null

#=================================================
# SETUP UNICORN, A RUBY SERVER
#=================================================
ynh_script_progression --message="Setting up Unicorn..."

# Make a backup of the original config file if modified
unicorn_config_file="$install_dir/config/unicorn.conf.rb"
ynh_backup_if_checksum_is_different "$unicorn_config_file"
ynh_store_file_checksum --file="$unicorn_config_file"

pushd "$install_dir"
    # Install bundler, a gems installer
    ynh_gem install bundler
    # Install without documentation
    echo "gem: --no-ri --no-rdoc" | ynh_exec_as "$app" "$install_dir/.gemrc" >/dev/null
popd

# Specific actions on ARM architecture
if dpkg --print-architecture | grep -q "arm"; then
    # Define the platform specifically to retrieve binaries
    # for libv8 because it currently doesn't compile on ARM devices
    ynh_exec_as "$app" --login bin/bundle config specific_platform arm-linux
fi

# Install dependencies
ynh_exec_as "$app" --login bin/bundle config set path 'vendor/bundle'
ynh_exec_as "$app" --login bin/bundle config set with 'development'
ynh_exec_as "$app" --login MAKEFLAGS=-j2 bin/bundle install --jobs 2

# On ARM architecture, replace bundled libpsl by system native libpsl
# because the provided binary isn't compatible
if dpkg --print-architecture | grep -q "arm"; then
    (
        cd "$install_dir/vendor/bundle/ruby"/*/"gems/mini_suffix-*/vendor"
        rm libpsl.so
        ln -s "$(ldconfig -p | grep libpsl | awk 'END {print $NF}')" libpsl.so
    )
fi

pushd "$install_dir"
    ynh_use_nodejs
    ynh_npm install --location=global terser
    ynh_npm install --location=global uglify-js
    ynh_exec_warn_less ynh_exec_as "$app" "$ynh_node_load_PATH" yarn install --production --frozen-lockfile
    ynh_exec_warn_less ynh_exec_as "$app" "$ynh_node_load_PATH" yarn cache clean
popd

#=================================================
# PREPARE THE DATABASE
#=================================================

ynh_script_progression --message="Preparing the database..."

ynh_exec_warn_less ynh_exec_as "$app" --login RAILS_ENV=production bin/bundle exec rake db:migrate
ynh_exec_warn_less ynh_exec_as "$app" --login RAILS_ENV=production bin/bundle exec rake themes:update assets:precompile

#=================================================
# CONFIGURE PLUGINS
#=================================================
ynh_script_progression --message="Configuring plugins..."

# Patch ldap-auth plugin dependency (omniauth-ldap) to fix it when using domain subfolder
# (Can only do that now because we are patching dependencies which have just been downloaded)
# Patch applied: https://github.com/omniauth/omniauth-ldap/pull/16
patch -p1 -d "$install_dir/plugins/discourse-ldap-auth/gems/$ruby_version/gems/omniauth-ldap*/" \
    < "../conf/ldap-auth-fix-subfolder.patch"

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression --message="Upgrading system configurations related to $app..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config
# Reference: https://meta.discourse.org/t/subfolder-support-with-docker/30507?u=falco&source_topic_id=54191
if [ "$path" != "/" ] ; then
    ynh_replace_string --target_file="/etc/nginx/conf.d/$domain.d/$app.conf" \
        --match_string='$proxy_add_x_forwarded_for' \
        --replace_string='$http_your_original_ip_header'
fi
ynh_store_file_checksum --file="/etc/nginx/conf.d/$domain.d/$app.conf"

additional_env="UNICORN_WORKERS=$unicorn_workers"
ynh_add_systemd_config
yunohost service add "$app" --log "$install_dir/log/unicorn.stderr.log" "$install_dir/log/unicorn.stdout.log" "$install_dir/log/production.log"

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --logfile="$install_dir/log/unicorn.stderr.log"
ynh_use_logrotate --logfile="$install_dir/log/unicorn.stdout.log"
ynh_use_logrotate --logfile="$install_dir/log/production.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting $app's systemd service..."

ynh_systemd_action --service_name="$app" --action="start" --log_path="$install_dir/log/unicorn.stderr.log" --line_match="INFO -- : worker=$((unicorn_workers-1)) ready"

#=================================================
# DISABLE MAINTENANCE MODE
#=================================================
ynh_script_progression --message="Disabling maintenance mode..."

ynh_maintenance_mode_OFF

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
